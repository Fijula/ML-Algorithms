🔍 What it is:
A specialized neural network for processing images.
It uses:

Convolutional layers to detect features (edges, textures, patterns)
Pooling layers to reduce dimensionality
Dense (Fully connected) layers for classification
📸 Diagram:
Image → Convolution → ReLU → Pooling → Dense → Output
       (edge detect)      (simplify)   (flatten)
🌍 Real-life Examples:
Face recognition (Facebook, Apple)
Medical diagnosis (detecting tumors in X-rays)
Object detection in autonomous cars
Instagram filters
👨‍💻 Code (with Keras):
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape(-1,28,28,1) / 255.0
x_test = x_test.reshape(-1,28,28,1) / 255.0

model = Sequential([
    Conv2D(32, kernel_size=3, activation='relu', input_shape=(28,28,1)),
    MaxPooling2D(),
    Flatten(),
    Dense(64, activation='relu'),
    Dense(10, activation='softmax')
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=3)
✅ When to Use:
Images
Spatial patterns
High accuracy image classification
