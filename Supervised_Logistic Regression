What it is: 
A supervised learning algorithm used for classification.
Predicts categories—yes or no, true or false.
Real-life Example: Predicting if an email is spam or not spam.

Code Example:
python
from sklearn.linear_model import LogisticRegression
X = [[0], [1], [2], [3]]  # Hours spent
y = [0, 0, 1, 1]          # 0 = fail, 1 = pass
model = LogisticRegression()
model.fit(X, y)
print(model.predict([[2]]))  # Pass or fail?

Below is a basic diagram to represent logistic regression used in spam detection.
Diagram: An S-shaped curve, instead of a straight line.

         |                                       ● = Spam
Prob     |                             ●   ●
(Spam)   |                        ●
         |                   ●
         |               ●
         |            ●
         |        ●
         |     ●
         |  ●
         |●________________________________________
           ←––––––––––––––––––––––––––––––––––→
                  Feature (e.g., spam keywords count)


Logistic Regression Example: Spam vs Not Spam (Binary Classification)

📦 Step 1: Install dependencies
pip install scikit-learn pandas
🧠 Step 2: Sample Dataset (Simplified)
We’ll simulate some basic email features:

num_links: number of links in email
contains_free: does it contain the word "free"? (0 = No, 1 = Yes)
spam: target variable (1 = spam, 0 = not spam)
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

# Sample email dataset
data = {
    'num_links': [0, 1, 3, 0, 2, 5, 1, 0, 4, 3],
    'contains_free': [0, 1, 1, 0, 1, 1, 0, 0, 1, 1],
    'spam': [0, 1, 1, 0, 1, 1, 0, 0, 1, 1]
}

df = pd.DataFrame(data)

# Features and target
X = df[['num_links', 'contains_free']]
y = df['spam']
🔍 Step 3: Train the Logistic Regression Model
# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = LogisticRegression()
model.fit(X_train, y_train)
📈 Step 4: Make Predictions
# Predict for a new email:
# e.g., 2 links, contains the word "free"
new_email = [[2, 1]]
prediction = model.predict(new_email)

print("Spam" if prediction[0] == 1 else "Not Spam")
🔬 Optional: See Prediction Probabilities
# Show predicted probabilities
proba = model.predict_proba(new_email)
print(f"Probability of NOT SPAM: {proba[0][0]:.2f}, SPAM: {proba[0][1]:.2f}")
🧪 Output Example:
Spam
Probability of NOT SPAM: 0.35, SPAM: 0.65
